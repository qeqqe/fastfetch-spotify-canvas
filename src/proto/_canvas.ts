/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.31.1z
 * source: _canvas.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class CanvasRequest extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          tracks?: CanvasRequest.Track[];
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [1],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("tracks" in data && data.tracks != undefined) {
        this.tracks = data.tracks;
      }
    }
  }
  get tracks() {
    return pb_1.Message.getRepeatedWrapperField(
      this,
      CanvasRequest.Track,
      1
    ) as CanvasRequest.Track[];
  }
  set tracks(value: CanvasRequest.Track[]) {
    pb_1.Message.setRepeatedWrapperField(this, 1, value);
  }
  static fromObject(data: {
    tracks?: ReturnType<typeof CanvasRequest.Track.prototype.toObject>[];
  }): CanvasRequest {
    const message = new CanvasRequest({});
    if (data.tracks != null) {
      message.tracks = data.tracks.map((item) =>
        CanvasRequest.Track.fromObject(item)
      );
    }
    return message;
  }
  toObject() {
    const data: {
      tracks?: ReturnType<typeof CanvasRequest.Track.prototype.toObject>[];
    } = {};
    if (this.tracks != null) {
      data.tracks = this.tracks.map((item: CanvasRequest.Track) =>
        item.toObject()
      );
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.tracks.length)
      writer.writeRepeatedMessage(1, this.tracks, (item: CanvasRequest.Track) =>
        item.serialize(writer)
      );
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CanvasRequest {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new CanvasRequest();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(message.tracks, () =>
            pb_1.Message.addToRepeatedWrapperField(
              message,
              1,
              CanvasRequest.Track.deserialize(reader),
              CanvasRequest.Track
            )
          );
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): CanvasRequest {
    return CanvasRequest.deserialize(bytes);
  }
}
export namespace CanvasRequest {
  export class Track extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            track_uri?: string;
          }
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("track_uri" in data && data.track_uri != undefined) {
          this.track_uri = data.track_uri;
        }
      }
    }
    get track_uri() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set track_uri(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { track_uri?: string }): Track {
      const message = new Track({});
      if (data.track_uri != null) {
        message.track_uri = data.track_uri;
      }
      return message;
    }
    toObject() {
      const data: {
        track_uri?: string;
      } = {};
      if (this.track_uri != null) {
        data.track_uri = this.track_uri;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.track_uri.length) writer.writeString(1, this.track_uri);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Track {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new Track();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.track_uri = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Track {
      return Track.deserialize(bytes);
    }
  }

  export function addTracks(spotifyTrack: Track) {
    throw new Error("Function not implemented.");
  }
}
export class CanvasResponse extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          canvases?: CanvasResponse.Canvas[];
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [1],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("canvases" in data && data.canvases != undefined) {
        this.canvases = data.canvases;
      }
    }
  }
  get canvases() {
    return pb_1.Message.getRepeatedWrapperField(
      this,
      CanvasResponse.Canvas,
      1
    ) as CanvasResponse.Canvas[];
  }
  set canvases(value: CanvasResponse.Canvas[]) {
    pb_1.Message.setRepeatedWrapperField(this, 1, value);
  }
  static fromObject(data: {
    canvases?: ReturnType<typeof CanvasResponse.Canvas.prototype.toObject>[];
  }): CanvasResponse {
    const message = new CanvasResponse({});
    if (data.canvases != null) {
      message.canvases = data.canvases.map((item) =>
        CanvasResponse.Canvas.fromObject(item)
      );
    }
    return message;
  }
  toObject() {
    const data: {
      canvases?: ReturnType<typeof CanvasResponse.Canvas.prototype.toObject>[];
    } = {};
    if (this.canvases != null) {
      data.canvases = this.canvases.map((item: CanvasResponse.Canvas) =>
        item.toObject()
      );
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.canvases.length)
      writer.writeRepeatedMessage(
        1,
        this.canvases,
        (item: CanvasResponse.Canvas) => item.serialize(writer)
      );
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CanvasResponse {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new CanvasResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(message.canvases, () =>
            pb_1.Message.addToRepeatedWrapperField(
              message,
              1,
              CanvasResponse.Canvas.deserialize(reader),
              CanvasResponse.Canvas
            )
          );
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): CanvasResponse {
    return CanvasResponse.deserialize(bytes);
  }
}
export namespace CanvasResponse {
  export class Canvas extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            id?: string;
            canvas_url?: string;
            track_uri?: string;
            artist?: CanvasResponse.Canvas.Artist;
            other_id?: string;
            canvas_uri?: string;
          }
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("id" in data && data.id != undefined) {
          this.id = data.id;
        }
        if ("canvas_url" in data && data.canvas_url != undefined) {
          this.canvas_url = data.canvas_url;
        }
        if ("track_uri" in data && data.track_uri != undefined) {
          this.track_uri = data.track_uri;
        }
        if ("artist" in data && data.artist != undefined) {
          this.artist = data.artist;
        }
        if ("other_id" in data && data.other_id != undefined) {
          this.other_id = data.other_id;
        }
        if ("canvas_uri" in data && data.canvas_uri != undefined) {
          this.canvas_uri = data.canvas_uri;
        }
      }
    }
    get id() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get canvas_url() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set canvas_url(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get track_uri() {
      return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set track_uri(value: string) {
      pb_1.Message.setField(this, 5, value);
    }
    get artist() {
      return pb_1.Message.getWrapperField(
        this,
        CanvasResponse.Canvas.Artist,
        6
      ) as CanvasResponse.Canvas.Artist;
    }
    set artist(value: CanvasResponse.Canvas.Artist) {
      pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_artist() {
      return pb_1.Message.getField(this, 6) != null;
    }
    get other_id() {
      return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set other_id(value: string) {
      pb_1.Message.setField(this, 9, value);
    }
    get canvas_uri() {
      return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set canvas_uri(value: string) {
      pb_1.Message.setField(this, 11, value);
    }
    static fromObject(data: {
      id?: string;
      canvas_url?: string;
      track_uri?: string;
      artist?: ReturnType<
        typeof CanvasResponse.Canvas.Artist.prototype.toObject
      >;
      other_id?: string;
      canvas_uri?: string;
    }): Canvas {
      const message = new Canvas({});
      if (data.id != null) {
        message.id = data.id;
      }
      if (data.canvas_url != null) {
        message.canvas_url = data.canvas_url;
      }
      if (data.track_uri != null) {
        message.track_uri = data.track_uri;
      }
      if (data.artist != null) {
        message.artist = CanvasResponse.Canvas.Artist.fromObject(data.artist);
      }
      if (data.other_id != null) {
        message.other_id = data.other_id;
      }
      if (data.canvas_uri != null) {
        message.canvas_uri = data.canvas_uri;
      }
      return message;
    }
    toObject() {
      const data: {
        id?: string;
        canvas_url?: string;
        track_uri?: string;
        artist?: ReturnType<
          typeof CanvasResponse.Canvas.Artist.prototype.toObject
        >;
        other_id?: string;
        canvas_uri?: string;
      } = {};
      if (this.id != null) {
        data.id = this.id;
      }
      if (this.canvas_url != null) {
        data.canvas_url = this.canvas_url;
      }
      if (this.track_uri != null) {
        data.track_uri = this.track_uri;
      }
      if (this.artist != null) {
        data.artist = this.artist.toObject();
      }
      if (this.other_id != null) {
        data.other_id = this.other_id;
      }
      if (this.canvas_uri != null) {
        data.canvas_uri = this.canvas_uri;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.id.length) writer.writeString(1, this.id);
      if (this.canvas_url.length) writer.writeString(2, this.canvas_url);
      if (this.track_uri.length) writer.writeString(5, this.track_uri);
      if (this.has_artist)
        writer.writeMessage(6, this.artist, () =>
          this.artist.serialize(writer)
        );
      if (this.other_id.length) writer.writeString(9, this.other_id);
      if (this.canvas_uri.length) writer.writeString(11, this.canvas_uri);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Canvas {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new Canvas();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.id = reader.readString();
            break;
          case 2:
            message.canvas_url = reader.readString();
            break;
          case 5:
            message.track_uri = reader.readString();
            break;
          case 6:
            reader.readMessage(
              message.artist,
              () =>
                (message.artist =
                  CanvasResponse.Canvas.Artist.deserialize(reader))
            );
            break;
          case 9:
            message.other_id = reader.readString();
            break;
          case 11:
            message.canvas_uri = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Canvas {
      return Canvas.deserialize(bytes);
    }
  }
  export namespace Canvas {
    export class Artist extends pb_1.Message {
      #one_of_decls: number[][] = [];
      constructor(
        data?:
          | any[]
          | {
              artist_uri?: string;
              artist_name?: string;
              artist_img_url?: string;
            }
      ) {
        super();
        pb_1.Message.initialize(
          this,
          Array.isArray(data) ? data : [],
          0,
          -1,
          [],
          this.#one_of_decls
        );
        if (!Array.isArray(data) && typeof data == "object") {
          if ("artist_uri" in data && data.artist_uri != undefined) {
            this.artist_uri = data.artist_uri;
          }
          if ("artist_name" in data && data.artist_name != undefined) {
            this.artist_name = data.artist_name;
          }
          if ("artist_img_url" in data && data.artist_img_url != undefined) {
            this.artist_img_url = data.artist_img_url;
          }
        }
      }
      get artist_uri() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
      }
      set artist_uri(value: string) {
        pb_1.Message.setField(this, 1, value);
      }
      get artist_name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
      }
      set artist_name(value: string) {
        pb_1.Message.setField(this, 2, value);
      }
      get artist_img_url() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
      }
      set artist_img_url(value: string) {
        pb_1.Message.setField(this, 3, value);
      }
      static fromObject(data: {
        artist_uri?: string;
        artist_name?: string;
        artist_img_url?: string;
      }): Artist {
        const message = new Artist({});
        if (data.artist_uri != null) {
          message.artist_uri = data.artist_uri;
        }
        if (data.artist_name != null) {
          message.artist_name = data.artist_name;
        }
        if (data.artist_img_url != null) {
          message.artist_img_url = data.artist_img_url;
        }
        return message;
      }
      toObject() {
        const data: {
          artist_uri?: string;
          artist_name?: string;
          artist_img_url?: string;
        } = {};
        if (this.artist_uri != null) {
          data.artist_uri = this.artist_uri;
        }
        if (this.artist_name != null) {
          data.artist_name = this.artist_name;
        }
        if (this.artist_img_url != null) {
          data.artist_img_url = this.artist_img_url;
        }
        return data;
      }
      serialize(): Uint8Array;
      serialize(w: pb_1.BinaryWriter): void;
      serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.artist_uri.length) writer.writeString(1, this.artist_uri);
        if (this.artist_name.length) writer.writeString(2, this.artist_name);
        if (this.artist_img_url.length)
          writer.writeString(3, this.artist_img_url);
        if (!w) return writer.getResultBuffer();
      }
      static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Artist {
        const reader =
            bytes instanceof pb_1.BinaryReader
              ? bytes
              : new pb_1.BinaryReader(bytes),
          message = new Artist();
        while (reader.nextField()) {
          if (reader.isEndGroup()) break;
          switch (reader.getFieldNumber()) {
            case 1:
              message.artist_uri = reader.readString();
              break;
            case 2:
              message.artist_name = reader.readString();
              break;
            case 3:
              message.artist_img_url = reader.readString();
              break;
            default:
              reader.skipField();
          }
        }
        return message;
      }
      serializeBinary(): Uint8Array {
        return this.serialize();
      }
      static deserializeBinary(bytes: Uint8Array): Artist {
        return Artist.deserialize(bytes);
      }
    }
  }
}
